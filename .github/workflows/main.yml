name: CI/CD, Health-checks & Revenue Reports

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 * * * *'    # every hour
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm test

  deploy-to-heroku:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email:    ${{ secrets.HEROKU_EMAIL }}

  global-health-check:
    needs: deploy-to-heroku
    runs-on: ubuntu-latest
    steps:
      - name: Check /healthz
        run: |
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/healthz)
          echo "Healthz status: $STATUS"

  calculate-revenue:
    needs: deploy-to-heroku
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Stripe transactions (last hour)
        run: |
          stripe balance_transactions list \
            --limit 100 \
            --key ${{ secrets.STRIPE_SECRET_KEY }} \
            --created[gte]=$(date -d '1 hour ago' '+%s') > revenue.json
      - name: Compute revenue-per-second
        run: |
          TOTAL=$(jq '[.data[].amount] | add' revenue.json)
          SECONDS=3600
          echo "TOTAL=$TOTAL" | tee total.env
          echo "Last hour: $TOTAL cents"
          echo "Per sec: $((TOTAL/SECONDS)) cents/sec"
      - name: Post Revenue Check
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const total = parseInt(process.env.TOTAL)
            const perSec = Math.floor(total/3600)
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Revenue Report',
              head_sha: context.sha,
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Stripe Revenue',
                summary: `Last hour: $${(total/100).toFixed(2)}\nPer-sec: $${(perSec/100).toFixed(4)}`,
              }
            });

  verify-payouts:
    needs: calculate-revenue
    runs-on: ubuntu-latest
    steps:
      - name: Fetch last 3 payouts
        run: stripe payouts list --limit 3 --key ${{ secrets.STRIPE_SECRET_KEY }} > payouts.json
      - name: Display payouts
        run: jq '.data[] | "\(.id): \(.amount) cents â†’ \(.status) on \(.arrival_date)"' payouts.json
